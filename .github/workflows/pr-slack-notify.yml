name: PR Slack Notifier

on:
  pull_request:
    types: [labeled, closed]

permissions:
  contents: read
  actions: write

jobs:
  notify-slack:
    runs-on: ubuntu-latest

    steps:
      - name: Exit if label is not "Review Needed"
        if: ${{ github.event.action == 'labeled' }}
        run: |
          if [[ "${{ github.event.label.name }}" != "Review Needed" ]]; then
            echo "Label is not 'Review Needed'. Exiting."
            exit 0
          fi

      - name: Set PR Status and Emoji
        id: pr_status
        run: |
          status="${{ github.event.pull_request.state }}"
          emoji=":large_green_circle:"
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            status="merged"
            emoji=":git-merged:"
          elif [[ "$status" == "closed" ]]; then
            emoji=":git-closed:"
          fi
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "emoji=$emoji" >> $GITHUB_OUTPUT

      # - name: Debug cache file
      #   run: |
      #     ls -la cache_ts || echo "No cache_ts dir"
      #     cat cache_ts/slack-ts.txt || echo "No ts file"

      # ðŸ§  Restore Slack timestamp from cache
      - name: Restore Slack timestamp from cache
        id: restore-ts
        uses: actions/cache/restore@v4
        with:
          path: cache_ts
          key: slack-ts-${{ github.event.pull_request.number }}
          restore-keys: |
            slack-ts-${{ github.event.pull_request.number }}-

      # âœ… Read the timestamp if available
      - name: Read Slack timestamp from cache
        id: read-ts
        run: |
          if [ -f cache_ts/slack-ts.txt ]; then
            ts=$(cat cache_ts/slack-ts.txt)
            echo "ts=$ts" >> $GITHUB_OUTPUT
          else
            echo "ts=" >> $GITHUB_OUTPUT
          fi

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # ðŸ§± Build Slack message payload
      - name: Build Slack message blocks
        id: message-block
        run: |
          BLOCKS=$(jq -n \
            --arg emoji "${{ steps.pr_status.outputs.emoji }}" \
            --arg url "${{ github.event.pull_request.html_url }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --arg author "${{ github.event.pull_request.user.login }}" \
            --arg status "${{ steps.pr_status.outputs.status }}" '
            [
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: ":wave: A PR is in need of review"
                }
              },
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: "> *<\($url)|\($title)>*\n> *Author:* \($author)\n> *Status:* `\($status)`"
                }
              }
            ]
          ')

          printf "blocks_json<<EOF\n%s\nEOF\n" "$BLOCKS" >> "$GITHUB_OUTPUT"

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # ðŸ“¤ Send (or update) Slack message
      - name: Send new Slack message
        if: ${{ steps.read-ts.outputs.ts == '' }}
        id: send
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": ${{ steps.message-block.outputs.blocks_json }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Save Slack timestamp to file
        if: ${{ steps.send.outputs.ts != '' }}
        run: |
          mkdir -p cache_ts
          echo "${{ steps.send.outputs.ts }}" > cache_ts/slack-ts.txt

      - name: Save Slack timestamp to cache (persist)
        if: ${{ steps.send.outputs.ts != '' }}
        uses: actions/cache/save@v4
        with:
          path: cache_ts
          key: slack-ts-${{ github.event.pull_request.number }}-${{ github.run_id }}

      - name: Update Slack message
        if: ${{ steps.read-ts.outputs.ts != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.read-ts.outputs.ts }}
          payload: |
            {
              "blocks": ${{ steps.message-block.outputs.blocks_json }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
