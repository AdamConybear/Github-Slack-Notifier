name: PR Slack Notifier

on:
  pull_request:
    types: [labeled, closed]

run-name: PR ${{ github.event.pull_request.number }} - ${{ github.event.action }}

jobs:
  build-message:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.status }}
      emoji: ${{ steps.status.outputs.emoji }}
      blocks: ${{ steps.blocks.outputs.blocks }}
    steps:
      - name: Compute PR Status and Emoji
        id: status
        run: |
          status="${{ github.event.pull_request.state }}"
          emoji=":large_green_circle:"
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            status="merged"
            emoji=":git-merged:"
          elif [[ "$status" == "closed" ]]; then
            emoji=":git-closed:"
          fi
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "emoji=$emoji" >> $GITHUB_OUTPUT

      - name: Generate Slack Message Blocks
        id: blocks
        run: |
          blocks=$(jq -n \
            --arg url "${{ github.event.pull_request.html_url }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --arg author "${{ github.event.pull_request.user.login }}" \
            --arg status "${{ steps.status.outputs.status }}" '
            [
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: ":wave: A PR update"
                }
              },
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: "> *<\($url)|\($title)>*\n> *Author:* \($author)\n> *Status:* \($status)"
                }
              }
            ]
          ')
          # Escape newlines so it can be passed as output
          echo "blocks=$(echo "$blocks" | jq -c .)" >> $GITHUB_OUTPUT

  send-slack-message:
    if: ${{ github.event.action == 'labeled' && github.event.label.name == 'Review Needed' }}
    needs: build-message
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Message
        id: send
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": ${{ needs.build-message.outputs.blocks }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Save Slack Timestamp
        run: |
          mkdir -p slack_ts
          echo "${{ steps.send.outputs.ts }}" > slack_ts/ts.txt

      - name: Upload Slack Timestamp
        uses: actions/upload-artifact@v4
        with:
          name: slack-ts-${{ github.event.pull_request.number }}
          path: slack_ts/ts.txt

  update-slack-message:
    if: ${{ github.event.action == 'closed' }}
    needs: build-message
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get run ID of prior workflow
        id: get-run
        run: |
          run_id=$(gh run list \
            --workflow="PR Slack Notifier" \
            --branch "${{ github.event.pull_request.head.ref }}" \
            --json name,databaseId,status,conclusion \
            --limit 10 \
            -q '[.[] | select(.name == "PR ${{ github.event.pull_request.number }} - labeled" and .status == "completed" and .conclusion == "success")][0].databaseId')

          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Slack timestamp artifact
        uses: actions/download-artifact@v4
        with:
          name: slack-ts-${{ github.event.pull_request.number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-run.outputs.run_id }}

      - name: Read Slack timestamp from artifact
        id: read-ts
        run: |
          ts_file="slack-ts-${{ github.event.pull_request.number }}/ts.txt"
          if [ -f "$ts_file" ]; then
            ts=$(cat "$ts_file")
            echo "ts=$ts" >> $GITHUB_OUTPUT
          else
            echo "ts=" >> $GITHUB_OUTPUT
          fi

      - name: Update Slack Message
        if: ${{ steps.read-ts.outputs.ts != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.read-ts.outputs.ts }}
          payload: |
            {
              "blocks": ${{ needs.build-message.outputs.blocks }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
