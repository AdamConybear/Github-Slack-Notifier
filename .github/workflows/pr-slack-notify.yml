name: PR Slack Notifier

on:
  pull_request:
    types: [labeled, closed]

run-name: PR ${{ github.event.pull_request.number }} - ${{ github.event.action }}

jobs:
  get-first-run-id:
    if: ${{ github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.get-run.outputs.run_id }}
    steps:
      - name: Get prior run ID using GitHub Script
        id: get-run
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;

            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event: "pull_request"
            });

            const matchingRun = runs.data.workflow_runs.find(run =>
              run.name === `PR ${prNumber} - labeled` &&
              run.status === "completed" &&
              run.conclusion === "success" &&
              run.head_branch === context.payload.pull_request.head.ref
            );

            core.setOutput("run_id", matchingRun?.id || '')

  get-user-info:
    needs: get-first-run-id
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.read-artifact.outputs.ts }}
      author: ${{ steps.set-author.outputs.author }}
    steps:
      - name: Download Slack Info artifact
        if: needs.get-first-run-id.outputs.run_id != ''
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: slack-ts-${{ github.event.pull_request.number }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.get-first-run-id.outputs.run_id }}

      - name: Check if artifact exists
        id: check-file
        run: |
          if [ -f "slack_info.json" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Read Slack Info from artifact
        if: steps.check-file.outputs.found == 'true'
        id: read-artifact
        shell: bash
        run: |
          ts=$(jq -r '.ts' slack_info.json)
          author=$(jq -r '.author' slack_info.json)
          echo "ts=$ts" >> $GITHUB_OUTPUT
          echo "author=$author" >> $GITHUB_OUTPUT

      - name: Get author from API
        if: steps.check-file.outputs.found == 'false'
        id: get-author
        run: |
          gh_user="${{ github.event.pull_request.user.login }}"
          # slack_handle="<@$slack_id>"
          echo "author=$gh_user" >> $GITHUB_OUTPUT

      - name: Set final author
        id: set-author
        run: |
          author="${{ steps.read-artifact.outputs.author || steps.get-author.outputs.author }}"
          echo "author=$author" >> $GITHUB_OUTPUT

  build-message:
    runs-on: ubuntu-latest
    needs: get-user-info
    outputs:
      status: ${{ steps.status.outputs.status }}
      emoji: ${{ steps.status.outputs.emoji }}
      blocks: ${{ steps.blocks.outputs.blocks }}
    steps:
      - name: Compute PR Status and Emoji
        id: status
        run: |
          status="${{ github.event.pull_request.state }}"
          emoji=":wave:"
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            status="merged"
            emoji=":large_purple_circle:"
          elif [[ "$status" == "closed" ]]; then
            emoji=":red_circle:"
          fi
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "emoji=$emoji" >> $GITHUB_OUTPUT
          echo email:${{ github.event.pull_request.user.email }}
          echo ${{ github.event.pull_request.user }}

      - name: Generate Slack Message Blocks
        id: blocks
        run: |
          blocks=$(jq -n \
            --arg url "${{ github.event.pull_request.html_url }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --arg author "${{ needs.get-user-info.outputs.author }}" \
            --arg status "${{ steps.status.outputs.status }}" '
            [
              {
                "type": "section",
                "text": {
                  "type": "plain_text",
                  "text": ":wave: A PR is in need of review",
                  "emoji": true
                }
              },
              {
                "type": "rich_text",
                "elements": [
                  {
                    "type": "rich_text_quote",
                    "elements": [
                      {
                        "type": "link",
                        "url": $url,
                        "text": $title,
                        "style": {
                          "bold": true
                        }
                      },
                      {
                        "type": "text",
                        "text": "\nAuthor: ",
                        "style": {
                          "bold": true
                        }
                      },
                      {
                        "type": "text",
                        "text": $author
                      },
                      {
                        "type": "text",
                        "text": "\nStatus: ",
                        "style": {
                          "bold": true
                        }
                      },
                      {
                        "type": "text",
                        "text": $status
                      }
                    ]
                  }
                ]
              }
            ]
          ')
          # Escape newlines so it can be passed as output
          echo "blocks=$(echo "$blocks" | jq -c .)" >> $GITHUB_OUTPUT

  send-slack-message:
    if: ${{ github.event.action == 'labeled' && github.event.label.name == 'Review Needed' }}
    needs: [build-message, get-user-info]
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Message
        id: send
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": ${{ needs.build-message.outputs.blocks }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Save Slack Timestamp and User ID
        run: |
          printf '{ 
            "ts": ${{ steps.send.outputs.ts }},  
            "author": ${{ needs.get-user-info.outputs.author }}
          }' >> slack_info.json
        # echo "${{ steps.send.outputs.ts }}" > slack_info.json

      - name: Upload Slack Timestamp and User ID
        uses: actions/upload-artifact@v4
        with:
          name: slack-ts-${{ github.event.pull_request.number }}
          path: slack_info.json

  update-slack-message:
    if: ${{ github.event.action == 'closed' && needs.get-user-info.outputs.ts != '' }}
    needs: [build-message, get-user-info]
    runs-on: ubuntu-latest
    steps:
      # - name: Get prior run ID using GitHub Script
      #   id: get-run
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const prNumber = context.payload.pull_request.number;

      #       const runs = await github.rest.actions.listWorkflowRunsForRepo({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         event: "pull_request"
      #       });

      #       const matchingRun = runs.data.workflow_runs.find(run =>
      #         run.name === `PR ${prNumber} - labeled` &&
      #         run.status === "completed" &&
      #         run.conclusion === "success" &&
      #         run.head_branch === context.payload.pull_request.head.ref
      #       );

      #       if (!matchingRun) core.setFailed("Matching run not found");
      #       else core.setOutput("run_id", matchingRun.id);

      # - name: Download Slack Info artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: slack-ts-${{ github.event.pull_request.number }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     run-id: ${{ steps.get-run.outputs.run_id }}

      # - name: Read Slack Info from artifact
      #   id: read-ts
      #   shell: bash
      #   run: |
      #     ts=$(jq -r '.ts' slack_info.json)
      #     user_id=$(jq -r '.user_id' slack_info.json)
      #     echo "ts=$ts" >> $GITHUB_OUTPUT
      #     echo "user_id=$user_id" >> $GITHUB_OUTPUT
        # value=`cat ts.txt`
        # echo "ts=$value" >> $GITHUB_OUTPUT

      - name: Update Slack Message
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ needs.get-user-info.outputs.ts }}
          payload: |
            {
              "blocks": ${{ needs.build-message.outputs.blocks }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
