name: PR Slack Notifier

on:
  pull_request:
    types: [labeled, synchronize, closed]

jobs:
  notify-slack:
    runs-on: ubuntu-latest

    steps:
      - name: Exit if label is not "Review Needed"
        if: ${{ github.event.action == 'labeled' }}
        run: |
          if [[ "${{ github.event.label.name }}" != "Review Needed" ]]; then
            echo "Label is not 'Review Needed'. Exiting."
            exit 0
          fi

      - name: Set PR Status and Emoji
        id: pr_status
        run: |
          status="${{ github.event.pull_request.state }}"
          emoji=":eyes:"
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            status="merged"
            emoji=":tada:"
          elif [[ "$status" == "closed" ]]; then
            emoji=":x:"
          fi
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "emoji=$emoji" >> $GITHUB_OUTPUT

      # ─────────────────────────────────────────────────────────────
      # 👤 Slack ID Cache: Try downloading Slack ID artifact
      # - name: Try to download cached Slack ID
      #   id: slack-cache
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: slack-id-${{ github.event.pull_request.user.login }}
      #   continue-on-error: true

      # - name: Read Slack ID from cache
      #   id: slack-read
      #   run: |
      #     if [ -f slack-id.txt ]; then
      #       slack_id=$(cat slack-id.txt)
      #       echo "slack_id=$slack_id" >> $GITHUB_OUTPUT
      #     fi

      # ─────────────────────────────────────────────────────────────
      # 🔍 Fallback: Resolve Slack ID using reusable workflow
      # - name: Resolve Slack ID if not cached
      #   if: ${{ steps.slack-read.outputs.slack_id == '' }}
      #   uses: ./.github/workflows/resolve-slack-id.yml
      #   with:
      #     github_user: ${{ github.event.pull_request.user.login }}
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   id: slack-lookup

      # 🧠 Save resolved Slack ID
      # - name: Cache Slack ID
      #   if: ${{ steps.slack-lookup.outputs.slack_id != '' }}
      #   run: echo "${{ steps.slack-lookup.outputs.slack_id }}" > slack-id.txt

      # - name: Upload Slack ID artifact
      #   if: ${{ steps.slack-lookup.outputs.slack_id != '' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: slack-id-${{ github.event.pull_request.user.login }}
      #     path: slack-id.txt

      # ─────────────────────────────────────────────────────────────
      # 🧠 Restore Slack timestamp from cache
      - name: Restore Slack timestamp from cache
        id: restore-ts
        uses: actions/cache/restore@v4
        with:
          path: cache_ts
          key: slack-ts-${{ github.event.pull_request.number }}
          restore-keys: slack-ts-

      # ✅ Read the timestamp if available
      - name: Read Slack timestamp from cache
        id: read-ts
        run: |
          if [ -f cache_ts/slack-ts.txt ]; then
            ts=$(cat cache_ts/slack-ts.txt)
            echo "ts=$ts" >> $GITHUB_OUTPUT
          else
            echo "ts=" >> $GITHUB_OUTPUT
          fi

      # ─────────────────────────────────────────────────────────────
      # 🧱 Build Slack message payload
      - name: Build Slack message blocks
        id: message-block
        run: |
          BLOCKS=$(jq -n \
            --arg emoji "${{ steps.pr_status.outputs.emoji }}" \
            --arg url "${{ github.event.pull_request.html_url }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --arg number "${{ github.event.pull_request.number }}" \
            --arg author "${{ github.event.pull_request.user.login }}" \
            --arg status "${{ steps.pr_status.outputs.status }}" '
            [
              {
                type: "section",
                text: {
                  type: "mrkdwn",
                  text: "\($emoji) *<\($url)|PR #\($number): \($title)>*"
                }
              },
              {
                type: "context",
                elements: [
                  { type: "mrkdwn", text: "*Author:* <https://github.com/\($author)|\($author)>" },
                  { type: "mrkdwn", text: "*Status:* `\($status)`" }
                ]
              }
            ]
          ')

          printf "blocks_json<<EOF\n%s\nEOF\n" "$BLOCKS" >> "$GITHUB_OUTPUT"


      # ─────────────────────────────────────────────────────────────
      # 📤 Send (or update) Slack message
      - name: Send new Slack message
        if: ${{ steps.read-ts.outputs.ts == '' }}
        id: send
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": ${{ steps.message-block.outputs.blocks_json }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Save Slack timestamp to cache
        if: ${{ steps.send.outputs.ts != '' }}
        run: |
          mkdir -p cache_ts
          echo "${{ steps.send.outputs.ts }}" > cache_ts/slack-ts.txt

      - name: Save Slack timestamp to cache (persist)
        if: ${{ steps.send.outputs.ts != '' }}
        uses: actions/cache/save@v4
        with:
          path: cache_ts
          key: slack-ts-${{ github.event.pull_request.number }}

      - name: Update Slack message
        if: ${{ steps.read-ts.outputs.ts != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          update-ts: ${{ steps.read-ts.outputs.ts }}
          payload: |
            {
              "blocks": ${{ steps.message-block.outputs.blocks_json }}
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # 💾 Save Slack timestamp for future updates
      # - name: Save Slack timestamp
      #   if: ${{ github.event.action == 'labeled' && github.event.label.name == 'Review Needed' }}
      #   run: echo "${{ steps.slack.outputs.ts }}" > slack-ts.txt

      # - name: Upload Slack timestamp artifact
      #   if: ${{ github.event.action == 'labeled' && github.event.label.name == 'Review Needed' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: slack-ts-artifact-${{ github.event.pull_request.number }}
      #     path: slack-ts.txt
